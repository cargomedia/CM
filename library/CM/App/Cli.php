<?php

class CM_App_Cli extends CM_Cli_Runnable_Abstract {

    /**
     * @param bool|null $reload
     */
    public function setup($reload = null) {
        $provisionLoader = CM_App::getInstance()->getProvisionLoader();
        if ($reload) {
            $provisionLoader->unload($this->_getStreamOutput());

            $cacheCli = new CM_Cache_Cli($this->_getStreamInput(), $this->_getStreamOutput(), $this->_getStreamError());
            $cacheCli->clear();
        }
        $provisionLoader->load($this->_getStreamOutput());
    }

    public function fillCaches() {
        $this->_getStreamOutput()->writeln('Warming up cachesâ€¦');
        CM_App::getInstance()->fillCaches();
    }

    public function deploy() {
        $this->setup();
        $this->setDeployVersion();

        $dbCli = new CM_Db_Cli($this->_getStreamInput(), $this->_getStreamOutput(), $this->_getStreamError());
        $dbCli->runUpdates();
    }

    public function generateConfigInternal() {
        $indentation = '    ';
        $indent = function ($content) use ($indentation) {
            return preg_replace('/(:?^|[\n])/', '$1' . $indentation, $content);
        };

        $generator = new CM_Config_Generator();
        $classTypesConfig = $generator->getConfigClassTypes()->exportAsString('$config');
        $actionVerbsConfig = $generator->getConfigActionVerbs()->exportAsString('$config');
        foreach ($generator->getClassTypesRemoved() as $classRemoved) {
            $this->_getStreamOutput()->writeln('Removed `' . $classRemoved . '`');
        }
        foreach ($generator->getClassTypesAdded() as $type => $classAdded) {
            $this->_getStreamOutput()->writeln('Added `' . $classAdded . '` with type `' . $type . '`');
        }

        // Create model class types and action verbs config PHP
        $configPhp = new CM_File(DIR_ROOT . 'resources/config/internal.php');
        $configPhp->ensureParentDirectory();
        $configPhp->truncate();
        $configPhp->appendLine('<?php');
        $configPhp->appendLine('// This is autogenerated config file. You should not change it manually.');
        $configPhp->appendLine();
        $configPhp->appendLine('return function (CM_Config_Node $config) {');
        $configPhp->appendLine($indent($classTypesConfig));
        $configPhp->appendLine($indent($actionVerbsConfig));
        $configPhp->appendLine('};');
        $this->_getStreamOutput()->writeln('Created `' . $configPhp->getPath() . '`');

        // Create model class types and action verbs config JS
        $configJs = new CM_File(DIR_ROOT . 'resources/config/js/internal.js');
        $configJs->ensureParentDirectory();
        $configJs->truncate();
        $classTypes = $generator->getNamespaceTypes();
        $configJs->appendLine('cm.model.types = ' . CM_Util::jsonEncode(array_flip($classTypes['CM_Model_Abstract']), true) . ';');
        $configJs->appendLine('cm.action.types = ' . CM_Util::jsonEncode(array_flip($classTypes['CM_Action_Abstract']), true) . ';');
        $this->_getStreamOutput()->writeln('Created `' . $configJs->getPath() . '`');
    }

    /**
     * @param string    $filename
     * @param string    $configJson
     * @param bool|null $merge
     */
    public function setConfig($filename, $configJson, $merge = null) {
        $merge = (bool) $merge;
        $configJson = (object) CM_Util::jsonDecode($configJson);
        $configFile = new CM_File(DIR_ROOT . 'resources/config/' . $filename . '.php');

        $config = new CM_Config_Node();
        if ($merge && $configFile->exists()) {
            $config->extendWithFile($configFile);
        }
        $config->extendWithConfig($configJson);
        $configStr = $config->exportAsString('$config');

        $indentation = '    ';
        $indent = function ($content) use ($indentation) {
            return preg_replace('/(:?^|[\n])/', '$1' . $indentation, $content);
        };

        $configFile->ensureParentDirectory();
        $configFile->write(join(PHP_EOL, [
            '<?php',
            '// This is autogenerated config file. You should not change it manually.',
            '',
            'return function (CM_Config_Node $config) {',
            $indent($configStr),
            '};',
            '',
        ]));
        $this->_getStreamOutput()->writeln('Created `' . $configFile->getPath() . '`');
    }

    public static function getPackageName() {
        return 'app';
    }
}
