.clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

.nowrap {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.word_wrap {
  word-wrap: break-word;
  overflow-wrap: break-word;
}

.triangle(@colorDirectionBottom: transparent, @colorDirectionLeft: transparent, @colorDirectionTop: transparent, @colorDirectionRight: transparent, @size: 5px) {
  position: absolute;
  width: 0;
  height: 0;
  content: "";
  border: @size solid transparent;
  border-top-color: @colorDirectionBottom;
  border-right-color: @colorDirectionLeft;
  border-bottom-color: @colorDirectionTop;
  border-left-color: @colorDirectionRight;
  top: 50%;
  margin-top: -@size;
  left: -8px;
}

.triangleBorder(@position, @colorBorder: @colorFgBorder, @colorInner: @colorBg, @size: 9px, @borderSize: 1px) when (@position = top) {
  &:after, &:before {
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    bottom: 100%;
    left: 50%;
  }

  &:after {
    border-color: transparent;
    border-width: @size;
    margin-left: -@size;
    border-bottom-color: @colorInner;
  }

  &:before {
    border-width: @size + @borderSize;
    margin-left: -(@size + @borderSize);
    border-bottom-color: @colorBorder;
  }
}

.triangleBorder(@position, @colorBorder: @colorFgBorder, @colorInner: @colorBg, @size: 9px, @borderSize: 1px) when (@position = bottom) {
  &:after, &:before {
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    left: 50%;
    top: 100%;
  }

  &:after {
    border-color: transparent;
    border-width: @size;
    margin-left: -@size;
    border-top-color: @colorInner;
  }

  &:before {
    border-width: @size + @borderSize;
    margin-left: -(@size + @borderSize);
    border-top-color: @colorBorder;
  }
}

.triangleBorder(@position, @colorBorder: @colorFgBorder, @colorInner: @colorBg, @size: 9px, @borderSize: 1px) when (@position = left) {
  &:after, &:before {
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    top: 50%;
    right: 100%;
  }

  &:after {
    border-color: transparent;
    border-width: @size;
    margin-top: -@size;
    border-right-color: @colorInner;
  }

  &:before {
    border-width: @size + @borderSize;
    margin-top: -(@size + @borderSize);
    border-right-color: @colorBorder;
  }
}

.triangleBorder(@position, @colorBorder: @colorFgBorder, @colorInner: @colorBg, @size: 9px, @borderSize: 1px) when (@position = right) {
  &:after, &:before {
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    top: 50%;
    left: 100%;
  }

  &:after {
    border-width: @size;
    border-color: transparent;
    margin-top: -@size;
    border-left-color: @colorInner;
  }

  &:before {
    border-width: @size + @borderSize;
    margin-top: -(@size + @borderSize);
    border-left-color: @colorBorder;
  }
}

.clipper(@height: 20px, @colorBg: @colorBg) {
  &:after {
    pointer-events: none;
    position: absolute;
    content: "";
    width: 100%;
    height: @height;
    bottom: 0;
    left: 0;
    .gradient(vertical, fadeout(@colorBg, 100), @colorBg, 0, 80%);
  }
}

.appearance(@value) {
  -webkit-appearance: @value;
  -moz-appearance: @value;
}

.animation(@name, @duration: 300ms, @timing-function: ease, @delay: 0s, @iteration-count: 1, @direction: normal, @fill-mode: none) {
  animation: @name @duration @timing-function @delay @iteration-count @direction @fill-mode;
}

.gradient(@direction, @color1, @color2, @pos1: 0%, @pos2: 100%) when (@direction = horizontal) and (iscolor(@color1)) and (iscolor(@color2)) {
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr=rgbahex(@color1),endColorstr=rgbahex(@color2));
  background-image: linear-gradient(to right,@color1 @pos1,@color2 @pos2);
}

.gradient(@direction, @color1, @color2, @pos1: 0%, @pos2: 100%) when (@direction = vertical) and (iscolor(@color1)) and (iscolor(@color2)) {
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=rgbahex(@color1),endColorstr=rgbahex(@color2));
  background-image: linear-gradient(to bottom,@color1 @pos1,@color2 @pos2);
}

.fontFace(@family, @file, @weight: normal, @style: normal) {
  @font-face{
    font-family: @family;
    src: url(urlFont("@{file}.eot") + "");
    src: url(urlFont("@{file}.eot") + "?#iefix") format("embedded-opentype"),
         url(urlFont("@{file}.woff") + "") format("woff"),
         url(urlFont("@{file}.ttf") + "") format("truetype"),
         url(urlFont("@{file}.svg") + "#@{family}") format("svg");
    font-weight: @{weight};
    font-style: @{style};
  }
}
